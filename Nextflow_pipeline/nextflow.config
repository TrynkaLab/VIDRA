#!/usr/bin/java

report{
    enabled = true
    overwrite = true
}

params {
    output_dir = "/output_all_genes_20240320/"
    cluster_file = "/container/Resources/manual_genes.csv"
    subset_cluster = [1] // this should have the format of a python list of numbers e.g. [1,2]
    // Important!! no space between clusters
    // set subset_cluster to None to remove the filter
    // subset_cluster = None
    colocalisation_threshold = 0.7
    AZ_pheno_conversion_Table = "/container/Resources/conversion_table_AZ_phenotypes_EBI_34375979_traits.csv" // this conversion table was from EBI and tailored to convert all UKB phenotypes. This reference maps 85% of traits
    AZ_data = "/az_exwas/"
    RareVars_AZ_protein_info_output_name = "out_AZ_protein_info" //
    RareVars_ClinVar_protein_info_output_name = "out_CV_protein_info" //
    filter_score_clinvar = 0.7 // this is the filter used to drop the variants in clinvar analysis
    pre_AS_out_name = 'preASwrangle'
    genes_to_fetch = "/lustre/scratch123/hgi/mdt0/otar2069/Aim1/AS_per_gene/Resources/all_human_protein_coding_genes_ENSG.csv"
    gene_symbols_to_fetch = "/lustre/scratch123/hgi/mdt0/otar2069/Aim1/AS_per_gene/Resources/all_human_protein_coding_genes_symbol.csv"
    genes_to_fetch_complete = "/container/Resources/all_human_protein_coding_genes.csv"
    alphamissense_info = '/alphamissense/AlphaMissense_hg38.tsv.gz'
    cachevep = '/lustre/scratch123/hgi/mdt0/otar2069/Aim1/AS_per_gene/.cache_VEP/vep_data/'
    vep_plugin_resources = '/lustre/scratch123/hgi/mdt2/teams/trynka/resources'
    filter_ASanalysis_genes = "/lustre/scratch123/hgi/mdt0/otar2069/Aim1/AS_per_gene/Resources/AS_analysis_genes_to_keep.txt"
    convertOldEFOtoUpdateOnes = "/container/Resources/convert_old_EFOids_toCurrentOnes.csv"
}

env {
    CMDSTAN="/container/.cmdstan/cmdstan-2.34.1"
    PYTHONNOUSERSITE = 1 // Export this variable to prevent local Python libraries from conflicting with those in the container
    NXF_ANSI_LOG=true // Ansi false return a long list where every process is one line rather then grouped
    NXF_OPTS="-Xms14G -Xmx14G -Dnxf.pool.maxThreads=2000"
    NXF_DEBUG="0"
    NXF_SCM_FILE="/nfs/users/nfs_l/ls31/otar2069/Aim1/otar2069_aim1_docker/scm.config"
    NXF_EXECUTOR="lsf"
    NXF_SINGULARITY_CACHEDIR="${NXF_HOME}/.singularity"
    XDG_CACHE_HOME="${HOME}/.cache/" // required for httpstan
}

// Singularity settings
singularity{
    enabled = true
    autoMounts = true
}

process {
    scratch = true
    maxRetries=3 // number of attempts before after getting an error. At the moment set on 1.
    errorStrategy='ignore'
    executor = 'lsf'
    queue = 'normal'
    submitRateLimit = '10sec'
    queueSize = 100
    withName:Rare_AZvariants_extraction {
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>100000] rusage[tmp=50000, mem=100000] span[hosts=1]' -M 100000 -n 5"
    }
    withName:Rare_AZvariants_extraction_per_gene {
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>50000] rusage[tmp=50000, mem=50000] span[hosts=1]' -M 50000 -n 3"
    }
    withName:coding_GWAS_effects {
        container = '/software/teamtrynka/users/ls31/singularity/vep.sif'
        queue = 'normal'
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>50000] rusage[tmp=10000, mem=50000] span[hosts=1]' -M 50000 -n 5"
    }
    withName:RareVars_AZ_protein_info_split {
        queue = 'normal'
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>100000] rusage[tmp=100000, mem=100000] span[hosts=1]' -M 100000 -n 5"
    }
    withName:RareVars_AZ_protein_info {
        container = '/software/teamtrynka/users/ls31/singularity/vep.sif'
        queue = 'normal'
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>50000] rusage[tmp=10000, mem=50000] span[hosts=1]' -M 50000 -n 5"
    }
    withName:RareVars_AZ_protein_info_collate{
        errorStrategy = 'ignore'  //"{ task.attempt <= maxRetries  ? 'retry' : 'ignore' }"
        maxRetries = 2
        queue = 'normal'
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>10000] rusage[tmp=5000, mem=10000] span[hosts=1]' -M 10000 -n 5"
    }
    withName:RareVars_ClinVar_protein_info {
        container = '/software/teamtrynka/users/ls31/singularity/vep.sif'
        queue = 'normal'
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>50000] rusage[tmp=10000, mem=50000] span[hosts=1]' -M 50000 -n 5"
    }  
    withName:pre_processing_AS {
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>30000] rusage[tmp=30000, mem=30000] span[hosts=1]' -M 30000 -n 2"
    }  
    withName:create_scrambled_ref_distribution {
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>50000] rusage[tmp=30000, mem=50000] span[hosts=1]' -M 50000 -n 2"
    }   
    withName:ASestimate {
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>5000] rusage[tmp=1000, mem=5000] span[hosts=1]' -M 5000 -n 5"
    }  
    withName: 'AS_stats_gene_phenotypes_linear' {
        errorStrategy = 'retry'
        maxRetries = 5
        clusterOptions = {"-R 'select[mem>${2000 * task.attempt}] rusage[tmp=${2000 * task.attempt}, mem=${2000 * task.attempt}] span[hosts=1]' -M ${2000 * task.attempt} -n 1" }
    }
    withName: 'AS_stats_test_hyperparameters' {
        clusterOptions = "-R 'select[mem>2000] rusage[tmp=2000, mem=2000] span[hosts=1]' -M 2000 -n 1"
    }
    withName:calculate_alternativeMR {
        container = '/software/teamtrynka/users/ls31/singularity/mr_comparisons_latest.sif'
        queue = 'normal'
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>2000] rusage[tmp=2000, mem=2000] span[hosts=1]' -M 2000 -n 2"
    } 
    withName:endsignal {
        clusterOptions = "-R 'select[mem>1000] rusage[tmp=1000, mem=1000] span[hosts=1]' -M 1000 -n 1"
    }
    withName:compactCsvASstats {
        clusterOptions = "-R 'select[model==Intel_Platinum && mem>50000] rusage[tmp=50000, mem=50000] span[hosts=1]' -M 50000 -n 5"
    }
    // Default options of memory reqyest for jobs (se lables for different requests):
    clusterOptions = "-R 'select[model==Intel_Platinum && mem>5000] rusage[tmp=10000, mem=5000] span[hosts=1]' -M 5000 -n 5"
    // on farm22 the path is:
    container = '/software/teamtrynka/users/ls31/singularity/as_ppi_latest.sif'
}

Miscellaneous{
    cleanup = true
}

dag {
    enabled = true
    file = 'pipeline_dag.png'
    overwrite = true
}
